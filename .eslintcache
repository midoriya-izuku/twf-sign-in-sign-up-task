<<<<<<< HEAD
[{"D:\\laravel\\twf-sign-in-sign-up-task\\src\\App.js":"1"},{"size":1519,"mtime":1609165356885,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"glb5i2","D:\\laravel\\twf-sign-in-sign-up-task\\src\\App.js",["6"],{"ruleId":"7","severity":1,"message":"8","line":1,"column":10,"nodeType":"9","messageId":"10","endLine":1,"endColumn":18},"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar"]
=======
[{"D:\\laravel\\twf-sign-in-sign-up-task\\src\\App.js":"1","D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\SignUp.js":"2","D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\ForgottenPassword.js":"3","D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\Dashboard.js":"4","D:\\laravel\\twf-sign-in-sign-up-task\\src\\reportWebVitals.js":"5","D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\SignIn.js":"6","D:\\laravel\\twf-sign-in-sign-up-task\\src\\contexts\\AuthContext.js":"7","D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\PrivateRoute.js":"8","D:\\laravel\\twf-sign-in-sign-up-task\\src\\index.js":"9"},{"size":1485,"mtime":1609168824051,"results":"10","hashOfConfig":"11"},{"size":5222,"mtime":1609168619558,"results":"12","hashOfConfig":"11"},{"size":3466,"mtime":1609167854222,"results":"13","hashOfConfig":"11"},{"size":1631,"mtime":1609168812033,"results":"14","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"11"},{"size":3560,"mtime":1609163589853,"results":"16","hashOfConfig":"11"},{"size":1126,"mtime":1609162588723,"results":"17","hashOfConfig":"11"},{"size":451,"mtime":1609164273493,"results":"18","hashOfConfig":"11"},{"size":500,"mtime":499162500000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"glb5i2",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\laravel\\twf-sign-in-sign-up-task\\src\\App.js",[],"D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\SignUp.js",["40"],"import React, { useEffect, useState, useRef, Fragment } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  signUpContainer: {\r\n    top: \"50vh\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    position: \"relative\",\r\n    padding: \"1.3em\",\r\n    border: \"1px solid lightgray\",\r\n    borderRadius: \"10px\",\r\n    width: \"40vw\",\r\n    minWidth: \"300px\",\r\n    maxWidth: \"450px\",\r\n    textAlign: \"center\",\r\n  },\r\n  formInput: {\r\n    border: \"0\",\r\n    margin: \"0\",\r\n    padding: \"0\",\r\n    position: \"relative\",\r\n    minWidth: \"0\",\r\n    verticalAlign: \"top\",\r\n    display: \"block\",\r\n    flex: \"none\",\r\n    color: \"black\",\r\n    marginBottom: \"30px\",\r\n  },\r\n  formTitle: {\r\n    fontSize: \"1.3em\",\r\n  },\r\n  logInSection: {\r\n    marginTop: \"1.5em\",\r\n  },\r\n}));\r\nconst SignUp = () => {\r\n  const [formErrors, setFormErrors] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    rePassword: \"\",\r\n  });\r\n\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    rePassword: \"\",\r\n  });\r\n  const isInitialMount = useRef(true); //when the component is initially mounted set useRef to true\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      //set the component as mounted\r\n      isInitialMount.current = false;\r\n    } else {\r\n      validate();\r\n    }\r\n  }, [formData]); //as soon as form Input changes validate the input\r\n\r\n  const history = useHistory();\r\n  \r\n  const { signup } = useAuth();\r\n\r\n  const [signUpError, setSignUpError] = useState();\r\n\r\n  const { email, password, rePassword } = formData;\r\n\r\n  const validate = () => {\r\n    let errors = { password: \"\", rePassword: \"\", email: \"\" };\r\n    \r\n    if (password.length > 0 && password.length < 8) {\r\n      errors.password = \"Password should be at least 8 characters long\";\r\n    } else {\r\n      errors.password = \"\";\r\n    }\r\n    if (\r\n      password.length > 0 &&\r\n      rePassword.length > 0 &&\r\n      password !== rePassword\r\n    ) {\r\n      errors.rePassword = \"Passwords do not match\";\r\n    } else {\r\n      errors.rePassword = \"\";\r\n    }\r\n    setFormErrors(errors);\r\n  };\r\n  const onInputChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const signUpUser = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await signup(email, password);\r\n      history.push(\"/\")\r\n    } catch (err) {\r\n      setSignUpError(\"Unable to create an account\");\r\n    }\r\n  };\r\n\r\n  const isValidated = !Object.values(formErrors).some(\r\n    (x) => x !== null && x !== \"\"\r\n  );\r\n\r\n  const isFormEmpty = !Object.values(formData).every(\r\n    (x) => x !== null && x !== \"\"\r\n  );\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Fragment>\r\n      {signUpError && <Alert severity=\"error\">{signUpError}</Alert>}\r\n      <div className={classes.signUpContainer}>\r\n        <p className={classes.formTitle}>Create Account</p>\r\n        <hr />\r\n        <form onSubmit={(e) => signUpUser(e)}>\r\n          <TextField\r\n            type=\"email\"\r\n            fullWidth={true}\r\n            error={formErrors.email.length > 0 ? true : false}\r\n            className={classes.formInput}\r\n            id=\"email\"\r\n            required\r\n            name=\"email\"\r\n            label=\"Email\"\r\n            variant=\"outlined\"\r\n            onChange={(e) => onInputChange(e)}\r\n            value={email}\r\n            helperText={formErrors.email}\r\n            autoComplete=\"email\"\r\n          />\r\n          <TextField\r\n            type=\"password\"\r\n            fullWidth={true}\r\n            error={formErrors.password.length > 0 ? true : false}\r\n            className={classes.formInput}\r\n            required\r\n            id=\"password\"\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            variant=\"outlined\"\r\n            onChange={(e) => onInputChange(e)}\r\n            value={password}\r\n            helperText={formErrors.password}\r\n            autoComplete=\"new-password\"\r\n          />\r\n          <TextField\r\n            type=\"password\"\r\n            fullWidth={true}\r\n            error={formErrors.rePassword.length > 0 ? true : false}\r\n            className={classes.formInput}\r\n            required\r\n            id=\"rePassword\"\r\n            name=\"rePassword\"\r\n            label=\"Confirm Password\"\r\n            variant=\"outlined\"\r\n            onChange={(e) => onInputChange(e)}\r\n            value={rePassword}\r\n            helperText={formErrors.rePassword}\r\n            autoComplete=\"off\"\r\n          />\r\n          <Button\r\n            disabled={isFormEmpty || !isValidated}\r\n            variant=\"contained\"\r\n            fullWidth={true}\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n          >\r\n            Sign Up\r\n          </Button>\r\n        </form>\r\n        <div className={classes.logInSection}>\r\n          Already have an account?\r\n          <Link to=\"/signin\"> Sign In</Link>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n",["41","42"],"D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\ForgottenPassword.js",[],"D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\Dashboard.js",["43"],"D:\\laravel\\twf-sign-in-sign-up-task\\src\\reportWebVitals.js",[],"D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\SignIn.js",["44"],"D:\\laravel\\twf-sign-in-sign-up-task\\src\\contexts\\AuthContext.js",[],"D:\\laravel\\twf-sign-in-sign-up-task\\src\\components\\PrivateRoute.js",[],"D:\\laravel\\twf-sign-in-sign-up-task\\src\\index.js",[],{"ruleId":"45","severity":1,"message":"46","line":63,"column":6,"nodeType":"47","endLine":63,"endColumn":16,"suggestions":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":2,"message":"54","line":39,"column":24,"nodeType":"55","endLine":39,"endColumn":29},{"ruleId":"56","severity":1,"message":"57","line":1,"column":27,"nodeType":"58","messageId":"59","endLine":1,"endColumn":33},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'validate'. Either include it or remove the dependency array.","ArrayExpression",["60"],"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"react/jsx-no-undef","'Alert' is not defined.","JSXIdentifier","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar",{"desc":"63","fix":"64"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [formData, validate]",{"range":"65","text":"66"},[1623,1633],"[formData, validate]"]
>>>>>>> dev
